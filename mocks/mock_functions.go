// Code generated by MockGen. DO NOT EDIT.
// Source: api/function.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/pusher/cli/api"
)

// MockFunctionService is a mock of FunctionService interface.
type MockFunctionService struct {
	ctrl     *gomock.Controller
	recorder *MockFunctionServiceMockRecorder
}

// MockFunctionServiceMockRecorder is the mock recorder for MockFunctionService.
type MockFunctionServiceMockRecorder struct {
	mock *MockFunctionService
}

// NewMockFunctionService creates a new mock instance.
func NewMockFunctionService(ctrl *gomock.Controller) *MockFunctionService {
	mock := &MockFunctionService{ctrl: ctrl}
	mock.recorder = &MockFunctionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFunctionService) EXPECT() *MockFunctionServiceMockRecorder {
	return m.recorder
}

// CreateFunction mocks base method.
func (m *MockFunctionService) CreateFunction(appID, name string, events []string, body string) (api.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFunction", appID, name, events, body)
	ret0, _ := ret[0].(api.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFunction indicates an expected call of CreateFunction.
func (mr *MockFunctionServiceMockRecorder) CreateFunction(appID, name, events, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFunction", reflect.TypeOf((*MockFunctionService)(nil).CreateFunction), appID, name, events, body)
}

// DeleteFunction mocks base method.
func (m *MockFunctionService) DeleteFunction(appID, functionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFunction", appID, functionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFunction indicates an expected call of DeleteFunction.
func (mr *MockFunctionServiceMockRecorder) DeleteFunction(appID, functionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFunction", reflect.TypeOf((*MockFunctionService)(nil).DeleteFunction), appID, functionID)
}

// GetAllFunctionsForApp mocks base method.
func (m *MockFunctionService) GetAllFunctionsForApp(name string) ([]api.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFunctionsForApp", name)
	ret0, _ := ret[0].([]api.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFunctionsForApp indicates an expected call of GetAllFunctionsForApp.
func (mr *MockFunctionServiceMockRecorder) GetAllFunctionsForApp(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFunctionsForApp", reflect.TypeOf((*MockFunctionService)(nil).GetAllFunctionsForApp), name)
}

// GetFunction mocks base method.
func (m *MockFunctionService) GetFunction(appID, functionID string) (api.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFunction", appID, functionID)
	ret0, _ := ret[0].(api.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockFunctionServiceMockRecorder) GetFunction(appID, functionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockFunctionService)(nil).GetFunction), appID, functionID)
}

// UpdateFunction mocks base method.
func (m *MockFunctionService) UpdateFunction(appID, functionID, name string, events []string, body string) (api.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFunction", appID, functionID, name, events, body)
	ret0, _ := ret[0].(api.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFunction indicates an expected call of UpdateFunction.
func (mr *MockFunctionServiceMockRecorder) UpdateFunction(appID, functionID, name, events, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFunction", reflect.TypeOf((*MockFunctionService)(nil).UpdateFunction), appID, functionID, name, events, body)
}
